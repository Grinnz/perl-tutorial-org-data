[[!toc]]

#Introduction

Just as one of Perl's main tenets is "There Is More Than One Way To Do It", there is more than one way to learn it. Here we collect and organize the Perl tutorials available on the internet so you can easily find one that is fresh and suits your taste.

#Recommended Tutorials

These are fresh tutorials that teach a modern style of Perl. They are great for newcomers to learn the language and for seasoned developers to refresh their knowlege or learn new tricks.

<table class="tut">
    <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Perl</th>
        <th>Covers</th>
        <th>Size</th>
        <th>Lang</th>
        <th>Status</th>
        <th>Last Updated</th>
        <th>Popularity</th>
    </tr>

[[!ytemplate  id=tutorial_rows yaml="""
tutorials:

-   url:        http://szabgab.com/perl_tutorial.html
    name:       Gabor Szabo's Perl Tutorial
    type:       Web + Video
    version:    5.10
    covers:     Perl Basics
    size:       Medium
    lang:       EN
    status:     Just Beginning
    lastupdate: 2011.11.16

-   url:        http://learn.perl.org/
    name:       "Learn Perl Website"
    type:       Web
    version:    5.*
    covers:     Installing Perl<br>First Steps<br>Official PerlFAQ
    size:       Medium
    lang:       EN
    status:     Complete
    lastupdate: 2011.10.28

-   url:        http://www.modernperlbooks.com/mt/2011/10/modern-perl-the-book-2011-2012-edition-draft.html
    name:       "Modern Perl: The Book 2011-2012"
    type:       PDF
    version:    5.12
    covers:     Perl Basics
    size:       Large
    lang:       EN
    status:     Draft
    lastupdate: 2011.10.28

-   url:        http://search.cpan.org/perldoc?perlootut
    name:       perlootut
    type:       Web
    version:    5.*
    covers:     Object-Orientation
    size:       Small
    lang:       EN
    status:     Complete
    lastupdate: 2011.09.17

-   url:        http://qntm.org/files/perl/perl.html
    name:       Learn Perl in about 2 hours 30 minutes
    type:       Web
    version:    5.8
    covers:     Perl Basics
    size:       Small
    lang:       EN
    status:     Complete
    lastupdate: 2011.07.31

-   url:        http://nereida.deioc.ull.es/~pp2/perlexamples/perlexamples.html
    name:       Programaci&oacute;n Distribuida
    type:       HTML
    version:    5.8
    covers:     Distributed Programming
    size:       Medium
    lang:       ES
    status:     Complete
    lastupdate: 2011.06.05

-   url:        http://nereida.deioc.ull.es/~lhp/perlexamples/
    name:       Una Introducci&oacute;n a Perl
    type:       PS + HTML
    version:    5.8
    covers:     Perl Basics
    size:       Large
    lang:       ES
    status:     Complete
    lastupdate: 2011.04.15

-   url:        http://perldoc.perl.org/perlintro.html
    name:       perlintro
    type:       Web
    version:    5.*
    covers:     Quickstart
    size:       Small
    lang:       EN
    status:     Complete
    lastupdate: 2010.12.09

-   url:        http://onyxneon.com/books/modern_perl/
    name:       "Modern Perl: The Book"
    type:       PDF
    version:    5.10
    covers:     Perl Basics
    size:       Large
    lang:       EN
    status:     Complete
    lastupdate: 2010.10

-   url:        http://www.shmuelfomberg.com/perlhebtut/
    name:       Hebrew Perl Tutorial
    type:       Web + PDF
    version:    5.10
    covers:     Perl Basics
    size:       Large
    lang:       HE
    status:     Complete
    lastupdate: 2008.05

-   url:        http://hop.perl.plover.com
    name:       Higher-Order Perl
    type:       PDF + Book
    version:    5.8.6
    covers:     Very Advanced Techniques
    size:       Large
    lang:       EN
    status:     Complete
    lastupdate: 2005.05

"""]]

</table>

#Legacy Tutorials

These are old Perl tutorials that are well written and good references for old versions, but should not be used by newcomers to learn Perl.

<table class="tut">
    <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Perl</th>
        <th>Covers</th>
        <th>Size</th>
        <th>Lang</th>
        <th>Status</th>
        <th>Last Updated</th>
        <th>Popularity</th>
    </tr>


[[!ytemplate  id=tutorial_rows yaml="""
legacy:         1
tutorials:

-   url:        http://perl-seiten.privat.t-online.de
    name:       Eike Grote's German Perl Tutorial
    type:       Web
    version:    5.8.6
    covers:     Perl Basics
    size:       Large
    lang:       DE
    status:     Complete
    lastupdate: 2005.05

-   url:        http://www.scs.leeds.ac.uk/Perl/start.html
    name:       University of Leeds Perl Tutorial
    type:       Web
    version:    4
    covers:     Perl Basics
    size:       Large
    lang:       EN
    status:     Complete
    lastupdate: 1990

-   url:        http://geneura.ugr.es/~jmerelo/tutoriales/perl-apresurados/
    name:       Perl para apresurados
    type:       Web + DocBook + PDF
    version:    5.8.7
    covers:     Perl Basics
    size:       Small
    lang:       ES
    status:     Complete
    lastupdate: 2008.03.10

-   url:        http://www.cicei.ulpgc.es/ocon/gsi/tutorial_perl/
    name:       Tutorial de Perl
    type:       Web
    version:    5.6
    covers:     Perl Basics
    size:       Small
    lang:       ES
    status:     Complete
    lastupdate: 2007.01.22

-   url:        http://flanagan.ugr.es/perl/index2.htm
    name:       Tutorial de Introducci&oacute;n a Perl 
    type:       Web
    version:    5.6
    covers:     Perl Basics
    size:       Small
    lang:       ES
    status:     Complete
    lastupdate: 2002.07

"""]]

</table>

# TODO

The site is not yet complete, here are some ideas of what we might want to do with it. Want to help? Stop by in the IRC channel or find out more about the code of the site on the [[about]] page.

* in order to create free page links without breaking the repo on windows the ikiwiki code needs to be adapted to encode page filenames and urls
* country flags for the language?
* figure out how to structure tutorials/howtos written on this site
* add reddit button to the tutorial tables
* a linkable button? "Lean Perl - Your Way" (see promotejs.com)
* needs a proper design
* write an [[Tutorial Author Outreach/Email Template]] to be sent to tutorial authors explaining about perl-tutorial.org and inviting them to keep their entries updated
* send aforementioned email out to authors, will need a [[Tutorial Author Outreach/Contact List]] to track who was sent something

# Uncurated Tutorials

These tutorials have not yet been looked at in greater detail and thus remain unlinked. If you wish to help, please visit any of those links and add them with the appropriate information to one of the sections above.

* Beginning Perl Ed 3: http://www.apress.com/9781430227939
* http://amzn.com/0201795264
* http://amzn.com/0321496949
* http://evc-cit.info/cit042
* http://learn.perl.org
* http://learnperl.scratchcomputing.com/
* http://perl-begin.org/
* http://perl-begin.org/tutorials/perl-for-newbies/
* http://perldoc.perl.org/index-tutorials.html (those should be checked with the git repo to see how old they are realistically -- it's always the stable version, jj has been updating punctually and reliably)
* http://shop.oreilly.com/product/0636920018452.do
* http://shop.oreilly.com/product/9780596000271.do
* http://shop.oreilly.com/product/9780596001735.do
* http://shop.oreilly.com/product/9780596004927.do
* http://www.amazon.com/Effective-Perl-Programming-Writing-Programs/dp/0201419750/ref=sr_1_2?s=books&ie=UTF8&qid=1319749206&sr=1-2
* http://www.amazon.com/Perl-Best-Practices-Damian-Conway/dp/0596001738
* http://www.cgi101.com/book/
* http://www.ebb.org/PickingUpPerl/
* http://www.greglondon.com/iperl/
* http://www.lea-linux.org/documentations/index.php/Dev-perl
* http://www.perl.com/pub/2000/10/begperl1.html
* http://www.perl.org/books/beginning-perl/
* http://www.shlomifish.org/lecture/Perl/Newbies/
* http://www.sthomas.net/roberts-perl-tutorial.htm
* http://perltraining.com.au/notes/perlcgi.pdf/
* perl faq  faq.perl.org
* juerd perluniadvice
* http://perlmeme.org/
* book: Elements of Programming with Perl
* http://wiki.perl-community.de/Wissensbasis/Perl5Lernen
* http://perl101.org/
* http://web.archive.org/web/2010/http://jdporter.perlmonk.org/cgi_course/ (formerly http://users.easystreet.com/ovid/cgi_course/)
* http://perl.about.com/
* Unix and Perl Primer for Biologists http://korflab.ucdavis.edu/Unix_and_Perl/
* http://perlgeek.de/de/artikel/charsets-unicode german unicode tutorial, 2008, perl 5.8
* http://www.slideshare.net/brian_d_foy/perl-university

# Not Recommended

Here are tutorials that have been looked over and can't be recommended for several reasons. The date of the check is listed. If you think the evaluation is not true anymore let us know.

* http://es.tldp.org/Tutoriales/PERL/tutoperl-html/ - 2003.03.22. 
    name:       Tutorial de PERL en castellano
    type:       Web
    version:    5.6
    covers:     Perl Basics
    size:       Small
    lang:       ES
    status:     Complete

* http://www.perltutorial.org/ - 2011-11-04 - does not use strict, warnings or my() anywhere in the main tutorial; introduces c-style for loop (a foreach style loop is used later but not explained); suggests subroutine calls with ampersand without explaining

* http://www.tizag.com/perlT/ - 2011-11-05 - Besides the weak orthography and diction, numerous mistakes and shortcomings. There is hardly is a chapter without errors. These are the most egregious of the first 12:

    * http://www.tizag.com/perlT/

        > PERL

        The name of the language is [Perl](http://learn.perl.org/faq/perlfaq1.html#Whats-the-difference-between-perl-and-Perl-).

        > the latest version of Perl (currently 5.10)

        The [stable version](http://perl.org/get.html) is 5.14.

        > a PERL file must be saved with a .pl (.PL) file extension in order to be recognized as a functioning PERL script.

        The file extension holds no sway over the functioning of a script. Scripts with a non-customary extension or without one work just fine.

        > File names [�] must not contain a space.

        File names of scripts may contain spaces.


    * http://www.tizag.com/perlT/perlfirstscript.php

        > Your script is working perfectly if you are staring at a blank screen

        The description does not fit the code. Just as before, &#8223;[y]ou should see "Hello, Perl!" in the top left corner of your browser.�.

    * http://www.tizag.com/perlT/perlsyntax.php

        The paragraph &#8223;Escaping Characters� does not mention that [string literals can be delimited with different operators](http://perldoc.perl.org/perlop.html#Quote-and-Quote-like-Operators) so that content is not interpolated so that the use of backslashes as described becomes unnecessary.

    * http://www.tizag.com/perlT/perlvariables.php

        > A variable is defined by the `$` symbol (scalar), the `@` symbol (arrays), or the `%` symbol (hashes).

        A variable is defined by virtue of declaration in its scope. The word define is misused throughout this chapter, it should talk about declaring instead. What the author calls &#8223;symbol� most people call sigil. They do not refer to the type of the variable but the mode of addressing, the expressions `$foo{bar}` and `$foo[42]` or `@foo{qw(bar baz)}` and `@foo[1..7]` do not fit to the description.

        > Variables can be defined either way.

        Teaching this without pointing out the difference is a bad idea. Package variables (here: the ones declared without my) are a hold-over from the era before Perl 5, about 15 years ago. As written in the tutorial, the program will not work under the strict pragma whose usage has been recommended for years everywhere: &#8223;Global symbol "$somenumber" requires explicit package name at definestrings.pl line 6. � Execution of definestrings.pl aborted due to compilation errors.� The tutorial should only teach lexical variables (here: the ones declared with my).

        > my parameter

        [my is a function](http://perldoc.perl.org/functions/my.html).

    * http://www.tizag.com/perlT/perlstrings.php

        > q subfunction

        [q is an operator](http://perldoc.perl.org/perlop.html#Quote-and-Quote-like-Operators). There is no such thing as a subfunction, the author mixed up subroutine and function.

        > formatting characters

        These are called [escape sequences](http://perldoc.perl.org/perlre.html#Escape-sequences). It is not mentioned that the list in the tutorial is incomplete.

        http://www.tizag.com/perlT/perlnumbers.php

        > They exist in PERL as real numbers

        The standard Perl distribution, like most languages, comes with no facility for dealing with real numbers. Judging from the code example, the author intended to talk about natural numbers.

        > Here's a few trigonomic functions that will only function if your build of PERL has the Math::Trig module installed.

        The [sine function (sin)](http://perldoc.perl.org/functions/sin.html) is a built-in and therefore works without the module.

    * http://www.tizag.com/perlT/perloperators.php

        > Exponents

        The operator is called exponentiation.

        > Example: 7 le 11

        > Result: True

        The expression `7 le 11` evaluates false.

        > Example: 7 ge 11

        > Result: False

        The expression `7 ge 11` evaluates true.

        > In the table above, the black operators are for numbers and the red ones are for strings.

        The [operators &#8223;and�, &#8223;or�](http://perldoc.perl.org/perlop.html#Logical-And) are in red. It is wrong to claim that they are for strings.

    * http://www.tizag.com/perlT/perlarrays.php

        > qw Subroutine

        [qw is an operator](http://perldoc.perl.org/perlop.html#Quote-and-Quote-like-Operators).

        > sequentialarrays.pl:

        > @abc = (a .. z);

        > print "@abc<br />";

        > Display:

        > Quarter Dime Nickel

        > QuarterDimeNickel

        This is a copy-paste accident. The output does not fit to the code.

        > we can redefine the array as a scalar variable.

        This is assignment, not redefining.

        > When adding elements using push() or shift()

        shift() removes, unshift() adds.

        > Function: delete $array[index]

        > Definition: Removes an element by index number

        Only if it is the last one, usually the element is replaced with undef. Using the [delete function](http://perldoc.perl.org/functions/delete.html) on arrays is deprecated, there's no point in teaching it.

        > The sort() function sorts each element of an array according to ASCII Numeric standards.

        To the Unicode standard, no special collation rules, comparing codepoints only.

    * http://www.tizag.com/perlT/perlwhile.php

        The example whilearrayloop.pl contains a trap. The while loop aborts prematurely if the array contains a false element, such as 0, the empty string or undef.

    * http://www.tizag.com/perlT/perlhashes.php

        > We need to edit our hash to and change is the values to floating-point numbers.

        This whole part is totally confusing. The problem can be solved straight-forward by keeping the integer numbers, using the spaceship operator <=> to compare numerically instead of using the cmp operator to compare stringwise.

    * http://www.tizag.com/perlT/perlfilehandle.php

        The program in the paragraph &#8223;Assigning Handles� is not working. It won't compile because of the missing semicolon after the variable assignment. The sysopen call fails because the bareword `O_RDWR` is co�rced to 0. To make the sysopen calls work as intended, one first needs to import the topical constants from the Fcntl module: `use Fcntl qw(O_RDWR O_EXCL O_CREAT);`

        > sysopen(HANDLE, $FilePath, O_RDWR);

        Instead of the problematic bareword filehandles, [indirect filehandles](http://perldoc.perl.org/perlopentut.html#Indirect-Filehandles) should be taught.

        > printf HANDLE "Welcome to Tizag!";

        This is a trap. Should the string contain a format expression such as `%s`, it will be discarded. `print` should be used instead.

        > sysopen (HTML, '$filepath', O_RDWR|O_EXCL|O_CREAT, 0755) or die "$filepath cannot be opened.";

        The message is lacking the error message from the system. The `$!` variable should be added, or better yet, `autodie` should be taught.

        > printf HTML "<html>\n";

        > printf HTML "<head>\n";

        > printf HTML "<title>My Home Page</title>";

        > printf HTML "</head>\n";

        > printf HTML "<body>\n";

        Line-wrapping strings and heredoc strings should be taught.

    * http://www.tizag.com/perlT/perlfileopen.php

        In the paragraph &#8223;Open a File�:

        > $FH = "filehandle";

        This variable `$FH` is defined, but not used later.

        > open(FH, $FilePath, permissions);

        The syntax is wrong. The mode goes in the middle.

        > sysopen(FH, $FileName, permission);

        The variable `$FileName` was not defined.

        The next paragraph &#8223;File Permissions� does not talk about permissions, but access modes.

        > Here's a listing of what to pass to the open function when working with file handles.

        > < or r

        The open function only recognises the mode as used in shell, not the mode as used in C. That will provoke the diagnostic &#8223;Unknown open() mode 'r' at ��.
